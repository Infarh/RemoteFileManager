//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RemoteFileManager.FileServer {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileServer.IFileManagerService")]
    public interface IFileManagerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/GetRoots", ReplyAction="http://tempuri.org/IFileManagerService/GetRootsResponse")]
        System.IO.DriveInfo[] GetRoots();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/GetRoots", ReplyAction="http://tempuri.org/IFileManagerService/GetRootsResponse")]
        System.Threading.Tasks.Task<System.IO.DriveInfo[]> GetRootsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/GetDirectories", ReplyAction="http://tempuri.org/IFileManagerService/GetDirectoriesResponse")]
        System.IO.DirectoryInfo[] GetDirectories(string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/GetDirectories", ReplyAction="http://tempuri.org/IFileManagerService/GetDirectoriesResponse")]
        System.Threading.Tasks.Task<System.IO.DirectoryInfo[]> GetDirectoriesAsync(string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/GetFiles", ReplyAction="http://tempuri.org/IFileManagerService/GetFilesResponse")]
        System.IO.FileInfo[] GetFiles(string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/GetFiles", ReplyAction="http://tempuri.org/IFileManagerService/GetFilesResponse")]
        System.Threading.Tasks.Task<System.IO.FileInfo[]> GetFilesAsync(string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/GetFileInfo", ReplyAction="http://tempuri.org/IFileManagerService/GetFileInfoResponse")]
        System.IO.FileInfo GetFileInfo(string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/GetFileInfo", ReplyAction="http://tempuri.org/IFileManagerService/GetFileInfoResponse")]
        System.Threading.Tasks.Task<System.IO.FileInfo> GetFileInfoAsync(string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/GetDirectoryInfo", ReplyAction="http://tempuri.org/IFileManagerService/GetDirectoryInfoResponse")]
        System.IO.DirectoryInfo GetDirectoryInfo(string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/GetDirectoryInfo", ReplyAction="http://tempuri.org/IFileManagerService/GetDirectoryInfoResponse")]
        System.Threading.Tasks.Task<System.IO.DirectoryInfo> GetDirectoryInfoAsync(string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/CopyFile", ReplyAction="http://tempuri.org/IFileManagerService/CopyFileResponse")]
        void CopyFile(string Source, string Destination);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/CopyFile", ReplyAction="http://tempuri.org/IFileManagerService/CopyFileResponse")]
        System.Threading.Tasks.Task CopyFileAsync(string Source, string Destination);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/MoveFile", ReplyAction="http://tempuri.org/IFileManagerService/MoveFileResponse")]
        void MoveFile(string Source, string Destination);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/MoveFile", ReplyAction="http://tempuri.org/IFileManagerService/MoveFileResponse")]
        System.Threading.Tasks.Task MoveFileAsync(string Source, string Destination);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/DeleteFile", ReplyAction="http://tempuri.org/IFileManagerService/DeleteFileResponse")]
        void DeleteFile(string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/DeleteFile", ReplyAction="http://tempuri.org/IFileManagerService/DeleteFileResponse")]
        System.Threading.Tasks.Task DeleteFileAsync(string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/CreateDirectory", ReplyAction="http://tempuri.org/IFileManagerService/CreateDirectoryResponse")]
        System.IO.DirectoryInfo CreateDirectory(string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/CreateDirectory", ReplyAction="http://tempuri.org/IFileManagerService/CreateDirectoryResponse")]
        System.Threading.Tasks.Task<System.IO.DirectoryInfo> CreateDirectoryAsync(string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/DeleteDirectory", ReplyAction="http://tempuri.org/IFileManagerService/DeleteDirectoryResponse")]
        void DeleteDirectory(string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/DeleteDirectory", ReplyAction="http://tempuri.org/IFileManagerService/DeleteDirectoryResponse")]
        System.Threading.Tasks.Task DeleteDirectoryAsync(string Path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/Execute", ReplyAction="http://tempuri.org/IFileManagerService/ExecuteResponse")]
        int Execute(string Path, string Arguments, bool ShellExecute);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/Execute", ReplyAction="http://tempuri.org/IFileManagerService/ExecuteResponse")]
        System.Threading.Tasks.Task<int> ExecuteAsync(string Path, string Arguments, bool ShellExecute);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileManagerServiceChannel : RemoteFileManager.FileServer.IFileManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileManagerServiceClient : System.ServiceModel.ClientBase<RemoteFileManager.FileServer.IFileManagerService>, RemoteFileManager.FileServer.IFileManagerService {
        
        public FileManagerServiceClient() {
        }
        
        public FileManagerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileManagerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileManagerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileManagerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.IO.DriveInfo[] GetRoots() {
            return base.Channel.GetRoots();
        }
        
        public System.Threading.Tasks.Task<System.IO.DriveInfo[]> GetRootsAsync() {
            return base.Channel.GetRootsAsync();
        }
        
        public System.IO.DirectoryInfo[] GetDirectories(string Path) {
            return base.Channel.GetDirectories(Path);
        }
        
        public System.Threading.Tasks.Task<System.IO.DirectoryInfo[]> GetDirectoriesAsync(string Path) {
            return base.Channel.GetDirectoriesAsync(Path);
        }
        
        public System.IO.FileInfo[] GetFiles(string Path) {
            return base.Channel.GetFiles(Path);
        }
        
        public System.Threading.Tasks.Task<System.IO.FileInfo[]> GetFilesAsync(string Path) {
            return base.Channel.GetFilesAsync(Path);
        }
        
        public System.IO.FileInfo GetFileInfo(string Path) {
            return base.Channel.GetFileInfo(Path);
        }
        
        public System.Threading.Tasks.Task<System.IO.FileInfo> GetFileInfoAsync(string Path) {
            return base.Channel.GetFileInfoAsync(Path);
        }
        
        public System.IO.DirectoryInfo GetDirectoryInfo(string Path) {
            return base.Channel.GetDirectoryInfo(Path);
        }
        
        public System.Threading.Tasks.Task<System.IO.DirectoryInfo> GetDirectoryInfoAsync(string Path) {
            return base.Channel.GetDirectoryInfoAsync(Path);
        }
        
        public void CopyFile(string Source, string Destination) {
            base.Channel.CopyFile(Source, Destination);
        }
        
        public System.Threading.Tasks.Task CopyFileAsync(string Source, string Destination) {
            return base.Channel.CopyFileAsync(Source, Destination);
        }
        
        public void MoveFile(string Source, string Destination) {
            base.Channel.MoveFile(Source, Destination);
        }
        
        public System.Threading.Tasks.Task MoveFileAsync(string Source, string Destination) {
            return base.Channel.MoveFileAsync(Source, Destination);
        }
        
        public void DeleteFile(string Path) {
            base.Channel.DeleteFile(Path);
        }
        
        public System.Threading.Tasks.Task DeleteFileAsync(string Path) {
            return base.Channel.DeleteFileAsync(Path);
        }
        
        public System.IO.DirectoryInfo CreateDirectory(string Path) {
            return base.Channel.CreateDirectory(Path);
        }
        
        public System.Threading.Tasks.Task<System.IO.DirectoryInfo> CreateDirectoryAsync(string Path) {
            return base.Channel.CreateDirectoryAsync(Path);
        }
        
        public void DeleteDirectory(string Path) {
            base.Channel.DeleteDirectory(Path);
        }
        
        public System.Threading.Tasks.Task DeleteDirectoryAsync(string Path) {
            return base.Channel.DeleteDirectoryAsync(Path);
        }
        
        public int Execute(string Path, string Arguments, bool ShellExecute) {
            return base.Channel.Execute(Path, Arguments, ShellExecute);
        }
        
        public System.Threading.Tasks.Task<int> ExecuteAsync(string Path, string Arguments, bool ShellExecute) {
            return base.Channel.ExecuteAsync(Path, Arguments, ShellExecute);
        }
    }
}
